# ARGO WORKFLOWS

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: minimum-aco-argo-role
rules:
- apiGroups:
  - argoproj.io
  resources:
  - workfloweventbindings
  verbs:
  - list
- apiGroups:
  - argoproj.io
  resources:
  - workflowtemplates
  verbs:
  - get
- apiGroups:
  - argoproj.io
  resources:
  - workflows
  verbs:
  - create
  - get
  - watch
  - list
- apiGroups:
  - ""
  resources:
  - pods
  - pods/log
  verbs:
  - get
  - watch
  - list
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: argo-submit
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: minimum-aco-argo-role
subjects:
- kind: ServiceAccount
  name: default
  namespace: default
---

# VAULT

# Source: vault/templates/injector-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: vault-agent-injector
  namespace: default
  labels:
    app.kubernetes.io/name: vault-agent-injector
    app.kubernetes.io/instance: vault
    app.kubernetes.io/managed-by: Helm
---
# Source: vault/templates/server-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: vault
  namespace: default
  labels:
    helm.sh/chart: vault-0.15.0
    app.kubernetes.io/name: vault
    app.kubernetes.io/instance: vault
    app.kubernetes.io/managed-by: Helm
---
# Source: vault/templates/injector-clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: vault-agent-injector-clusterrole
  labels:
    app.kubernetes.io/name: vault-agent-injector
    app.kubernetes.io/instance: vault
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups: ["admissionregistration.k8s.io"]
  resources: ["mutatingwebhookconfigurations"]
  verbs: 
    - "get"
    - "list"
    - "watch"
    - "patch"
---
# Source: vault/templates/injector-clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: vault-agent-injector-binding
  labels:
    app.kubernetes.io/name: vault-agent-injector
    app.kubernetes.io/instance: vault
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: vault-agent-injector-clusterrole
subjects:
- kind: ServiceAccount
  name: vault-agent-injector
  namespace: default
---
# Source: vault/templates/server-clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: vault-server-binding
  labels:
    helm.sh/chart: vault-0.15.0
    app.kubernetes.io/name: vault
    app.kubernetes.io/instance: vault
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
- kind: ServiceAccount
  name: vault
  namespace: default
---
# Source: vault/templates/injector-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: vault-agent-injector-svc
  namespace: default
  labels:
    app.kubernetes.io/name: vault-agent-injector
    app.kubernetes.io/instance: vault
    app.kubernetes.io/managed-by: Helm
  
spec:
  ports:
  - name: https
    port: 443
    targetPort: 8080
  selector:
    app.kubernetes.io/name: vault-agent-injector
    app.kubernetes.io/instance: vault
    component: webhook
---
# Source: vault/templates/server-headless-service.yaml
# Service for Vault cluster
apiVersion: v1
kind: Service
metadata:
  name: vault-internal
  namespace: default
  labels:
    helm.sh/chart: vault-0.15.0
    app.kubernetes.io/name: vault
    app.kubernetes.io/instance: vault
    app.kubernetes.io/managed-by: Helm
  annotations:

spec:
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: "http"
      port: 8200
      targetPort: 8200
    - name: https-internal
      port: 8201
      targetPort: 8201
  selector:
    app.kubernetes.io/name: vault
    app.kubernetes.io/instance: vault
    component: server
---
# Source: vault/templates/server-service.yaml
# Service for Vault cluster
apiVersion: v1
kind: Service
metadata:
  name: vault
  namespace: default
  labels:
    helm.sh/chart: vault-0.15.0
    app.kubernetes.io/name: vault
    app.kubernetes.io/instance: vault
    app.kubernetes.io/managed-by: Helm
  annotations:

spec:
  # We want the servers to become available even if they're not ready
  # since this DNS is also used for join operations.
  publishNotReadyAddresses: true
  ports:
    - name: http
      port: 8200
      targetPort: 8200
    - name: https-internal
      port: 8201
      targetPort: 8201
  selector:
    app.kubernetes.io/name: vault
    app.kubernetes.io/instance: vault
    component: server
---
# Source: vault/templates/injector-deployment.yaml
# Deployment for the injector
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vault-agent-injector
  namespace: default
  labels:
    app.kubernetes.io/name: vault-agent-injector
    app.kubernetes.io/instance: vault
    app.kubernetes.io/managed-by: Helm
    component: webhook
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: vault-agent-injector
      app.kubernetes.io/instance: vault
      component: webhook
  template:
    metadata:
      labels:
        app.kubernetes.io/name: vault-agent-injector
        app.kubernetes.io/instance: vault
        component: webhook
    spec:
      
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  app.kubernetes.io/name: vault-agent-injector
                  app.kubernetes.io/instance: "vault"
                  component: webhook
              topologyKey: kubernetes.io/hostname
  
      
      
      serviceAccountName: "vault-agent-injector"
      hostNetwork: false
      securityContext:
        runAsNonRoot: true
        runAsGroup: 1000
        runAsUser: 100
      containers:
        - name: sidecar-injector
          
          image: "hashicorp/vault-k8s:0.12.0"
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
          env:
            - name: AGENT_INJECT_LISTEN
              value: :8080
            - name: AGENT_INJECT_LOG_LEVEL
              value: info
            - name: AGENT_INJECT_VAULT_ADDR
              value: http://vault.default.svc:8200
            - name: AGENT_INJECT_VAULT_AUTH_PATH
              value: auth/kubernetes
            - name: AGENT_INJECT_VAULT_IMAGE
              value: "hashicorp/vault:1.8.1"
            - name: AGENT_INJECT_TLS_AUTO
              value: vault-agent-injector-cfg
            - name: AGENT_INJECT_TLS_AUTO_HOSTS
              value: vault-agent-injector-svc,vault-agent-injector-svc.default,vault-agent-injector-svc.default.svc
            - name: AGENT_INJECT_LOG_FORMAT
              value: standard
            - name: AGENT_INJECT_REVOKE_ON_SHUTDOWN
              value: "false"
            - name: AGENT_INJECT_CPU_REQUEST
              value: "250m"
            - name: AGENT_INJECT_CPU_LIMIT
              value: "500m"
            - name: AGENT_INJECT_MEM_REQUEST
              value: "64Mi"
            - name: AGENT_INJECT_MEM_LIMIT
              value: "128Mi"
            - name: AGENT_INJECT_DEFAULT_TEMPLATE
              value: "map"
            - name: AGENT_INJECT_TEMPLATE_CONFIG_EXIT_ON_RETRY_FAILURE
              value: "true"
            
          args:
            - agent-inject
            - 2>&1
          livenessProbe:
            httpGet:
              path: /health/ready
              port: 8080
              scheme: HTTPS
            failureThreshold: 2
            initialDelaySeconds: 5
            periodSeconds: 2
            successThreshold: 1
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              path: /health/ready
              port: 8080
              scheme: HTTPS
            failureThreshold: 2
            initialDelaySeconds: 5
            periodSeconds: 2
            successThreshold: 1
            timeoutSeconds: 5
---
kind: PersistentVolume
apiVersion: v1
metadata:
  name: vault-pv-volume
  labels:
    app: vault
spec:
  storageClassName: manual
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteMany
  hostPath:
    path: "/mnt/data/vault"
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: vault-pv-claim
  labels:
    app: vault
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 5Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: vault-init-config
  labels:
    app: vault-init
data:
  argo-cloudops-policy.hcl: |
    # Create and manage roles
    path "auth/approle/role/argo-cloudops-projects-*" {
      capabilities = [ "create", "read", "update", "delete", "list" ]
    }

    # Write ACL policies
    path "sys/policies/acl/argo-cloudops-projects-*" {
      capabilities = [ "create", "read", "update", "delete", "list" ]
    }

    # Write AWS roles
    path "aws/roles/argo-cloudops-projects-*" {
      capabilities = [ "create", "read", "update", "delete", "list" ]
    }

    # List roles
    path "aws/roles/*" {
      capabilities = [ "read", "list" ]
    }
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: vault
  namespace: default
  labels:
    app.kubernetes.io/name: vault
    app.kubernetes.io/instance: vault
    app.kubernetes.io/managed-by: Helm
spec:
  serviceName: vault-internal
  podManagementPolicy: Parallel
  replicas: 1
  updateStrategy:
    type: OnDelete
  selector:
    matchLabels:
      app.kubernetes.io/name: vault
      app.kubernetes.io/instance: vault
      component: server
  template:
    metadata:
      labels:
        helm.sh/chart: vault-0.15.0
        app.kubernetes.io/name: vault
        app.kubernetes.io/instance: vault
        component: server
    spec:
      terminationGracePeriodSeconds: 10
      serviceAccountName: vault
      securityContext:
        runAsNonRoot: true
        runAsGroup: 1000
        runAsUser: 100
        fsGroup: 1000
      volumes:
        - name: vault-init-config-volume
          configMap:
            name: vault-init-config
        - name: vault-home
          persistentVolumeClaim:
            claimName: 'vault-pv-claim'
      initContainers:
        - name: fs-init
          image: hashicorp/vault:1.8.1
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 0
            privileged: true
            runAsGroup: 0
            runAsNonRoot: false
          command:
          - "/bin/sh"
          - "-ec"
          args: 
          - |
            chown -R vault /home/vault
          volumeMounts:
            - name: vault-home
              mountPath: /home/vault
      containers:
        - name: vault
          image: hashicorp/vault:1.8.1
          imagePullPolicy: IfNotPresent
          command:
          - "/bin/sh"
          - "-ec"
          args: 
          - |
            /usr/local/bin/docker-entrypoint.sh vault server -dev -log-level=info
          securityContext:
            allowPrivilegeEscalation: false
          env:
            - name: HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: VAULT_K8S_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: VAULT_K8S_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: VAULT_ADDR
              value: "http://127.0.0.1:8200"
            - name: VAULT_API_ADDR
              value: "http://$(POD_IP):8200"
            - name: SKIP_CHOWN
              value: "true"
            - name: SKIP_SETCAP
              value: "true"
            - name: HOSTNAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: VAULT_CLUSTER_ADDR
              value: "https://$(HOSTNAME).vault-internal:8201"
            - name: HOME
              value: "/home/vault"
            - name: VAULT_DEV_ROOT_TOKEN_ID
              value: root
            - name: VAULT_DEV_LISTEN_ADDRESS
              value: "[::]:8200"
            - name: AWS_PROFILE
              value: default
          volumeMounts:
            - name: vault-home
              mountPath: /home/vault
            - name: vault-init-config-volume
              mountPath: /tmp/initconfig
          ports:
            - containerPort: 8200
              name: http
            - containerPort: 8201
              name: https-internal
            - containerPort: 8202
              name: http-rep
          readinessProbe:
            # Check status; unsealed vault servers return 0
            # The exit code reflects the seal status:
            #   0 - unsealed
            #   1 - error
            #   2 - sealed
            exec:
              command: ["/bin/sh", "-ec", "vault status -tls-skip-verify"]
            failureThreshold: 2
            initialDelaySeconds: 5
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 3
          lifecycle:
            postStart:
              exec:
                command: 
                - "/bin/sh"
                - "-ec"
                - |
                    sleep 10
                    echo "Initializing vault policies and roles"
                    vault secrets enable aws
                    vault auth enable approle
                    vault policy write argo-cloudops-service /tmp/initconfig/argo-cloudops-policy.hcl
                    vault write auth/approle/role/argo-cloudops policies=argo-cloudops-service secret_id_ttl=8766h

                    vault read auth/approle/role/argo-cloudops/role-id -field=role_id | sed -En "s/role_id\s+(.*)/\1/p" > /home/vault/roleid.txt
                    vault write -f auth/approle/role/argo-cloudops/secret-id | sed -En "s/secret_id\s+(.*)/\1/p" > /home/vault/secretid.txt

                    CELLO_VAULT_ROLE_ID=$(cat /home/vault/roleid.txt)
                    CELLO_VAULT_SECRET_ID=$(cat /home/vault/secretid.txt)
                    vault write auth/approle/login role_id="${CELLO_VAULT_ROLE_ID}" secret_id="${CELLO_VAULT_SECRET_ID}" | sed -En "s/token\s+(.*)/\1/p" > /home/vault/vaulttoken.txt
                    exit 0
            # Vault container doesn't receive SIGTERM from Kubernetes
            # and after the grace period ends, Kube sends SIGKILL.  This
            # causes issues with graceful shutdowns such as deregistering itself
            # from Consul (zombie services).
            preStop:
              exec:
                command: 
                - "/bin/sh"
                - "-ec"
                - |
                    # Adding a sleep here to give the pod eviction a
                    # chance to propagate, so requests will not be made
                    # to this pod while it's terminating
                    rm /home/vault/roleid.txt
                    rm /home/vault/secretid.txt
                    sleep 5 && kill -SIGTERM $(pidof vault)
---
# Source: vault/templates/injector-mutating-webhook.yaml
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: vault-agent-injector-cfg
  labels:
    app.kubernetes.io/name: vault-agent-injector
    app.kubernetes.io/instance: vault
    app.kubernetes.io/managed-by: Helm
webhooks:
  - name: vault.hashicorp.com
    sideEffects: None
    admissionReviewVersions:
    - "v1beta1"
    - "v1"
    clientConfig:
      service:
        name: vault-agent-injector-svc
        namespace: default
        path: "/mutate"
      caBundle: ""
    rules:
      - operations: ["CREATE", "UPDATE"]
        apiGroups: [""]
        apiVersions: ["v1"]
        resources: ["pods"]
    failurePolicy: Ignore

# CELLO

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: cello
  name: cello
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cello
  template:
    metadata:
      labels:
        app: cello
    spec:
      volumes:
        - name: vault-home
          persistentVolumeClaim:
            claimName: 'vault-pv-claim'
      containers:
      - image: cello:latest
        name: cello
        imagePullPolicy: Never
        command:
        - "/bin/sh"
        - "-ec"
        args: 
        - |
          until [ -f /home/vault/secretid.txt ]
          do
            echo "Waiting for secret data to be written"
            sleep 5
          done
          echo "Secret data found"
          export VAULT_TOKEN="$(cat /home/vault/vaulttoken.txt)"
          export VAULT_ROLE="$(cat /home/vault/roleid.txt)"
          export VAULT_SECRET="$(cat /home/vault/secretid.txt)"

          mkdir -p ./ssl
          # generate certificate, suppress output unless there is an error
          output=$(openssl req -new -newkey rsa:4096 -days 3650 -nodes -x509 -subj "/C=US/ST=CA/L=Mountain View/O=Cognition/CN=app" -keyout ./ssl/certificate.key -out ./ssl/certificate.crt 2>&1) || echo "$output"

          mkdir -p /usr/local/share/ca-certificates/
          cp ./ssl/certificate.crt /usr/local/share/ca-certificates/certificate.crt
          chmod 644 /usr/local/share/ca-certificates/certificate.crt
          update-ca-certificates

          ./service
        env:
          - name: CELLO_ADMIN_SECRET
            value: abcd1234abcd1234
          - name: CELLO_GIT_AUTH_METHOD
            value: https
          - name: VAULT_ADDR
            value: http://vault.default.svc.cluster.local:8200
          - name: ARGO_ADDR
            value: http://127.0.0.1:9000
          - name: UPPER_DB_LOG
            value: DEBUG
          - name: CELLO_LOG_LEVEL
            value: DEBUG
        volumeMounts:
          - name: vault-home
            mountPath: /home/vault
